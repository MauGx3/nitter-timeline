[project]
name = "nitter-timeline"
version = "0.1.0"
description = "Web UI that aggregates Nitter RSS feeds into a Twitter-like timeline"
authors = [
	{ name = "Your Name", email = "you@example.com" }
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

dependencies = [
	"fastapi>=0.111.0,<1.0.0",
	"uvicorn[standard]>=0.30.0,<1.0.0",
	"httpx>=0.27.0,<1.0.0",
	"feedparser>=6.0.11,<7.0.0",
	"jinja2>=3.1.4,<4.0.0",
	"python-dateutil>=2.9.0.post0,<3.0.0",
	"cachetools>=5.3.3,<6.0.0",
	"pydantic>=1.10.15,<2.0.0",
	"bleach>=6.1.0,<7.0.0"
]

[project.scripts]
"nitter-timeline" = "nitter_timeline.__main__:main"

[project.optional-dependencies]
dev = ["pytest>=8.3", "pytest-asyncio>=0.23", "ruff>=0.5.5", "mypy>=1.11.0", "types-python-dateutil"]

[tool.ruff]
# Keep in sync with Pylint max-line-length.
line-length = 100
target-version = "py311"

[tool.ruff.lint]
# Selected rule sets:
# E,F: pycodestyle & pyflakes
# I: isort
# UP: pyupgrade
# B: flake8-bugbear
# SIM: flake8-simplify
# ASYNC: flake8-async
# N: pep8-naming
# A: flake8-builtins
# C4: flake8-comprehensions
# RUF: Ruff-specific rules
select = ["E", "F", "I", "UP", "B", "SIM", "ASYNC", "N", "A", "C4", "RUF"]

# Ignore rules that conflict with project style or are handled elsewhere.
ignore = []

[tool.ruff.lint.per-file-ignores]
# Tests may use assert statements and relaxed naming.
"tests/**/*" = ["S101", "N802", "N803", "N806"]

[tool.ruff.format]
# Defer formatting opinion beyond line length for now (can enable when migrating fully from other tools).
quote-style = "preserve"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
addopts = "-q"
asyncio_mode = "auto"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
